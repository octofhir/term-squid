name: Release Server

on:
  workflow_dispatch:
    inputs:
      bump_type:
        description: 'Version bump type'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major

env:
  CARGO_TERM_COLOR: always

jobs:
  release:
    name: Build and Release Server
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-release-${{ hashFiles('**/Cargo.lock') }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install
        working-directory: frontend

      - name: Build frontend
        run: pnpm run build
        working-directory: frontend

      - name: Get current version
        id: get_version
        run: |
          CURRENT_VERSION=$(grep '^version = ' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Bump version
        id: bump_version
        run: |
          CURRENT_VERSION="${{ steps.get_version.outputs.current_version }}"
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"

          case "${{ github.event.inputs.bump_type }}" in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac

          NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

          # Update version in Cargo.toml
          sed -i "s/^version = \".*\"/version = \"$NEW_VERSION\"/" Cargo.toml

      - name: Build server binary
        run: cargo build --release -p term-squid-backend

      - name: Create release archive
        run: |
          mkdir -p release
          cp target/release/backend release/term-squid-server
          tar -czf term-squid-server-${{ steps.bump_version.outputs.new_version }}-x86_64-unknown-linux-gnu.tar.gz -C release term-squid-server

      - name: Commit version bump
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add Cargo.toml Cargo.lock
          git commit -m "chore: bump version to ${{ steps.bump_version.outputs.new_version }} [skip ci]"
          git tag -a "server-v${{ steps.bump_version.outputs.new_version }}" -m "Server release v${{ steps.bump_version.outputs.new_version }}"

      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref }}
          tags: true

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: server-v${{ steps.bump_version.outputs.new_version }}
          name: Server v${{ steps.bump_version.outputs.new_version }}
          draft: false
          prerelease: false
          files: |
            term-squid-server-${{ steps.bump_version.outputs.new_version }}-x86_64-unknown-linux-gnu.tar.gz
          body: |
            ## Server Release v${{ steps.bump_version.outputs.new_version }}

            ### Changes
            - Version bump: ${{ github.event.inputs.bump_type }}

            ### Installation
            ```bash
            tar -xzf term-squid-server-${{ steps.bump_version.outputs.new_version }}-x86_64-unknown-linux-gnu.tar.gz
            ./term-squid-server
            ```
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}